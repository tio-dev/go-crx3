// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: pb/crx3.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CrxFileHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PSS signature with RSA public key. The public key is formatted as a
	// X.509 SubjectPublicKeyInfo block, as in CRXâ‚‚. In the common case of a
	// developer key proof, the first 128 bits of the SHA-256 hash of the
	// public key must equal the crx_id.
	Sha256WithRsa []*AsymmetricKeyProof `protobuf:"bytes,2,rep,name=sha256_with_rsa,json=sha256WithRsa" json:"sha256_with_rsa,omitempty"`
	// ECDSA signature, using the NIST P-256 curve. Public key appears in
	// named-curve format.
	// The pinned algorithm will be this, at least on 2017-01-01.
	Sha256WithEcdsa []*AsymmetricKeyProof `protobuf:"bytes,3,rep,name=sha256_with_ecdsa,json=sha256WithEcdsa" json:"sha256_with_ecdsa,omitempty"`
	// The binary form of a SignedData message. We do not use a nested
	// SignedData message, as handlers of this message must verify the proofs
	// on exactly these bytes, so it is convenient to parse in two steps.
	//
	// All proofs in this CrxFile message are on the value
	// "CRX3 SignedData\x00" + signed_header_size + signed_header_data +
	// archive, where "\x00" indicates an octet with value 0, "CRX3 SignedData"
	// is encoded using UTF-8, signed_header_size is the size in octets of the
	// contents of this field and is encoded using 4 octets in little-endian
	// order, signed_header_data is exactly the content of this field, and
	// archive is the remaining contents of the file following the header.
	SignedHeaderData []byte `protobuf:"bytes,10000,opt,name=signed_header_data,json=signedHeaderData" json:"signed_header_data,omitempty"`
}

func (x *CrxFileHeader) Reset() {
	*x = CrxFileHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_crx3_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrxFileHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrxFileHeader) ProtoMessage() {}

func (x *CrxFileHeader) ProtoReflect() protoreflect.Message {
	mi := &file_pb_crx3_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrxFileHeader.ProtoReflect.Descriptor instead.
func (*CrxFileHeader) Descriptor() ([]byte, []int) {
	return file_pb_crx3_proto_rawDescGZIP(), []int{0}
}

func (x *CrxFileHeader) GetSha256WithRsa() []*AsymmetricKeyProof {
	if x != nil {
		return x.Sha256WithRsa
	}
	return nil
}

func (x *CrxFileHeader) GetSha256WithEcdsa() []*AsymmetricKeyProof {
	if x != nil {
		return x.Sha256WithEcdsa
	}
	return nil
}

func (x *CrxFileHeader) GetSignedHeaderData() []byte {
	if x != nil {
		return x.SignedHeaderData
	}
	return nil
}

type AsymmetricKeyProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
}

func (x *AsymmetricKeyProof) Reset() {
	*x = AsymmetricKeyProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_crx3_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsymmetricKeyProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsymmetricKeyProof) ProtoMessage() {}

func (x *AsymmetricKeyProof) ProtoReflect() protoreflect.Message {
	mi := &file_pb_crx3_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsymmetricKeyProof.ProtoReflect.Descriptor instead.
func (*AsymmetricKeyProof) Descriptor() ([]byte, []int) {
	return file_pb_crx3_proto_rawDescGZIP(), []int{1}
}

func (x *AsymmetricKeyProof) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *AsymmetricKeyProof) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SignedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is simple binary, not UTF-8 encoded mpdecimal; i.e. it is exactly
	// 16 bytes long.
	CrxId []byte `protobuf:"bytes,1,opt,name=crx_id,json=crxId" json:"crx_id,omitempty"`
}

func (x *SignedData) Reset() {
	*x = SignedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_crx3_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedData) ProtoMessage() {}

func (x *SignedData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_crx3_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedData.ProtoReflect.Descriptor instead.
func (*SignedData) Descriptor() ([]byte, []int) {
	return file_pb_crx3_proto_rawDescGZIP(), []int{2}
}

func (x *SignedData) GetCrxId() []byte {
	if x != nil {
		return x.CrxId
	}
	return nil
}

var File_pb_crx3_proto protoreflect.FileDescriptor

var file_pb_crx3_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x62, 0x2f, 0x63, 0x72, 0x78, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x22, 0xc2, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x73, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x57, 0x69,
	0x74, 0x68, 0x52, 0x73, 0x61, 0x12, 0x42, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x63, 0x64, 0x73, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36,
	0x57, 0x69, 0x74, 0x68, 0x45, 0x63, 0x64, 0x73, 0x61, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x90, 0x4e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x51, 0x0a, 0x12, 0x41, 0x73, 0x79, 0x6d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x23, 0x0a, 0x0a, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x78,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x72, 0x78, 0x49, 0x64,
	0x42, 0x08, 0x48, 0x03, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62,
}

var (
	file_pb_crx3_proto_rawDescOnce sync.Once
	file_pb_crx3_proto_rawDescData = file_pb_crx3_proto_rawDesc
)

func file_pb_crx3_proto_rawDescGZIP() []byte {
	file_pb_crx3_proto_rawDescOnce.Do(func() {
		file_pb_crx3_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_crx3_proto_rawDescData)
	})
	return file_pb_crx3_proto_rawDescData
}

var file_pb_crx3_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_pb_crx3_proto_goTypes = []interface{}{
	(*CrxFileHeader)(nil),      // 0: pb.CrxFileHeader
	(*AsymmetricKeyProof)(nil), // 1: pb.AsymmetricKeyProof
	(*SignedData)(nil),         // 2: pb.SignedData
}
var file_pb_crx3_proto_depIdxs = []int32{
	1, // 0: pb.CrxFileHeader.sha256_with_rsa:type_name -> pb.AsymmetricKeyProof
	1, // 1: pb.CrxFileHeader.sha256_with_ecdsa:type_name -> pb.AsymmetricKeyProof
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pb_crx3_proto_init() }
func file_pb_crx3_proto_init() {
	if File_pb_crx3_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_crx3_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrxFileHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_crx3_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsymmetricKeyProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_crx3_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_crx3_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_crx3_proto_goTypes,
		DependencyIndexes: file_pb_crx3_proto_depIdxs,
		MessageInfos:      file_pb_crx3_proto_msgTypes,
	}.Build()
	File_pb_crx3_proto = out.File
	file_pb_crx3_proto_rawDesc = nil
	file_pb_crx3_proto_goTypes = nil
	file_pb_crx3_proto_depIdxs = nil
}
